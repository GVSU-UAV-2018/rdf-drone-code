#! /usr/bin/env python2

"""
Watchdog program

Starts the RDF program and checks to make sure it does not stall or die.
If the RDF program fails, this will restart it.
"""

import sys
import os
import signal
import time
import atexit

RUNDIR = '/home/pi/rdf-drone-code'
COMMAND = ['python2', 'uav-rdf-top-module.py']
STARTUP_WAIT = 5
HEARTBEAT_MAX_INTERVAL = 5
HEARTBEAT_PIPE_NAME = '/tmp/gvsu-rdf-alive'


def make_temporary_pipe(name):
    """
    Makes a pipe that will be deleted when this process exits normally.
    """
    os.mkfifo(name)
    atexit.register(lambda: os.unlink(name))
    

n_kills = 0
def try_kill_if_running(pid):
    """
    like os.kill(), tries to kill a program.
    Prints a warning on failure instead of throwing an exception.
    """
    global n_kills
    print('Killing pid {0} ({1})...'.format(pid, n_kills))
    n_kills += 1
    try:
        os.kill(pid, signal.SIGTERM)
    except OSError as e:
        print('Failed to kill '+str(pid)+': '+os.strerror(e.errno))
    return 0

n_starts = 0
def start_program(args):
    """
    Starts a program (args[0]) with arguments (args[1:N]), then
    waits STARTUP_WAIT seconds to give the program time to start up.
    """
    global n_starts
    pid = os.spawnvp(os.P_NOWAIT, args[0], args)
    print('Starting {0} (pid {1}) ({2}) ...'.format(args, pid, n_starts))
    n_starts += 1
    time.sleep(STARTUP_WAIT)
    print('Started!')
    return pid

def read_heartbeat(f):
    """
    Reads and returns a single byte from the heartbeat pipe.
    If reading fails for any reason, returns an empty string.
    """
    try:
        return os.read(f, 1)
    except OSError as e:
        return ''

n_died = 0
current_program = 0
def on_SIGCHLD(_, __):
    """
    Called by the operating system when the child process
    (the monitored program) dies. Reaps the dead process and
    starts a new one.
    """
    global n_died
    global current_program
    pid, status = os.wait()
    print('pid {0} died ({1})'.format(pid, n_died))
    n_died += 1
    while(len(read_heartbeat(HEARTBEAT_PIPE)) > 0):
        pass # discard heartbeat from dead process
    current_program = start_program(COMMAND)

signal.signal(signal.SIGCHLD, on_SIGCHLD)

def on_SIGTERM(_, __):
    """
    Called by the operating system when we receive a SIGTERM (polite request to
    stop this program). This should cause it to exit normally.
    """
    sys.exit()

signal.signal(signal.SIGTERM, on_SIGTERM)


# Main
###############

os.chdir(RUNDIR)
print('Working in folder {0}'.format(os.getcwd()))

make_temporary_pipe(HEARTBEAT_PIPE_NAME)
HEARTBEAT_PIPE = os.open(HEARTBEAT_PIPE_NAME, os.O_RDONLY | os.O_NONBLOCK)

last_heartbeat_instant = 0
current_program = start_program(COMMAND)

while(True):
    time.sleep(0.1)
    received = read_heartbeat(HEARTBEAT_PIPE)
    if len(received) > 0:
        print('(pid {0}): {1}'.format(current_program, received))
        last_heartbeat_instant = time.time()
    else:
        if time.time() - last_heartbeat_instant > HEARTBEAT_MAX_INTERVAL:
            print('Heartbeat stopped?')
            current_program = try_kill_if_running(current_program)