#!/usr/bin/env python2

import os

if __name__ != '__main__':
    print 'loading '+__name__+' as a module: what do you think you\'re doing?'
    os.exit(-1)

import os.path
from time import sleep
from fractions import gcd

from gnuradio import gr
from gnuradio import blocks
from gnuradio import audio
from gnuradio import filter as gr_filter

import programsetup
from blocks.wavsource import WavSource
from blocks.radiosource import RadioSource
from blocks.top_level_radio_processing import RDFRadioProcessing
from blocks.top_level_radio_processing import RDFRadioProcessing_output_types
from blocks.top_level_radio_processing import RDFRadioProcessing_output_slots
from blocks.save_to_csv import SaveToCsv
from blocks.tonesource import ToneSource

config = programsetup.get_radio_cmdline_config()
print(config)

try:
    os.makedirs(config.record_in)
except Exception as e:
    print e

class Main(gr.top_block):
    def __init__(self):
        gr.top_block.__init__(self)

        self.source = RadioSource(
            preferred_sample_rate=config.sample_rate,
            gains=config.gains,
            frequency_offset=config.frequency_offset,
            signal_frequency=config.SIGNAL_FREQUENCY,
            direction=config.direction)

        self.split_into_channels = blocks.complex_to_float()
        self.record = blocks.wavfile_sink(
            filename=config.record_in+'/'+str(config.direction)+'.wav',
            n_channels=2,
            sample_rate=self.source.sample_rate(),
            bits_per_sample=16)
            

        self.processing = RDFRadioProcessing(
            num_fft_bins=config.fft_resolution,
            center_frequency=0,
            signal_frequency=config.frequency_offset,
            signal_bandwidth=config.signal_bandwidth)

        self.sink = SaveToCsv(
            config.OUTPUT_FILE)

        self.connect((self.source, 0), (self.processing, 0))
        self.connect((self.source, 1), (self.processing, 1))

        self.connect((self.source, 0), self.split_into_channels)
        self.connect((self.split_into_channels, 0), (self.record, 0))
        self.connect((self.split_into_channels, 1), (self.record, 1))

        self.connect(
            (self.split_into_channels, 0),
            blocks.multiply_const_ff(100),
            gr_filter.rational_resampler_fff(
                interpolation=48000 / gcd(self.source.sample_rate(), 48000),
                decimation=self.source.sample_rate() / gcd(self.source.sample_rate(), 48000)),
            audio.sink(48000))

        for i in RDFRadioProcessing_output_slots.values():
            self.connect((self.processing, i), (self.sink, i))

main = Main()

main.processing.set_sample_rate(main.source.sample_rate())
main.start()
sleep(config.time)
main.stop()
main.wait()
