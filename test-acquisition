#!/usr/bin/env python2

import os
import sys

if __name__ != '__main__':
    print 'loading '+__name__+' as a module: what do you think you\'re doing?'
    os.exit(-1)

import os.path
from time import sleep
from fractions import Fraction
from argparse import ArgumentParser

from gnuradio import gr
from gnuradio import blocks
from gnuradio import audio
from gnuradio import filter as gr_filter

import programsetup
from blocks.wavsource import WavSource
from blocks.radiosource import RadioSource
from blocks.save_to_csv import SaveToCsv

argp = ArgumentParser()
config_defaults = programsetup.get_file_config()
programsetup.add_config_section_recording(argp, config_defaults['recording'])
programsetup.add_config_section_acquisition(argp, config_defaults['acquisition'])
programsetup.add_config_section_system(argp, config_defaults['system'])
argp.add_argument('SIGNAL_FREQUENCY', type=int, help='Frequency to search for, in Hz')
config = argp.parse_args()

print('Configuration:')
print(config)

try:
    os.makedirs(config.record_in)
except Exception as e:
    print e

class Main(gr.top_block):
    def __init__(self):
        gr.top_block.__init__(self)

        self.source = RadioSource(
            preferred_sample_rate=config.sample_rate,
            gains=config.gains,
            frequency_offset=config.frequency_offset,
            signal_frequency=config.SIGNAL_FREQUENCY)

        self.split_into_channels = blocks.complex_to_float()
        self.record = blocks.wavfile_sink(
            filename=config.record_in+'/'+config.recording_filename,
            n_channels=2,
            sample_rate=self.source.sample_rate(),
            bits_per_sample=16)

        self.connect(self.source, self.split_into_channels)
        self.connect((self.split_into_channels, 0), (self.record, 0))
        self.connect((self.split_into_channels, 1), (self.record, 1))

        audio_resample_rate = Fraction(48000, self.source.sample_rate())
        self.connect(
            (self.split_into_channels, 0),
            blocks.multiply_const_ff(100),
            gr_filter.rational_resampler_fff(
                interpolation=int(audio_resample_rate.numerator),
                decimation=audio_resample_rate.denominator),
            audio.sink(48000, 'hw:0,1'))

main = Main()

main.start()
sleep(config.time)
main.stop()
main.wait()
