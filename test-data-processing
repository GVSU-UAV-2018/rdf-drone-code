#!/usr/bin/env python2

import os

if __name__ != '__main__':
    print 'loading '+__name__+' as a module: what do you think you\'re doing?'
    os.exit(-1)

import os.path
from time import sleep
from argparse import ArgumentParser

from gnuradio import gr
from gnuradio import blocks
from gnuradio import audio

import programsetup
from blocks.wavsource import WavSource
from blocks.psd import PowerSpectralDensity
from blocks.signal_detection_method import select_detection_method
from blocks.save_to_csv import SaveToCsv

argp = ArgumentParser()
config_defaults = programsetup.get_file_config()
programsetup.add_config_section_system(argp, config_defaults['system'])
programsetup.add_config_section_signal_detection(argp, config_defaults['signal detection'])
argp.add_argument('INPUT_FOLDER', help='Input folder')
argp.add_argument('OUTPUT_FILE', help='Output file')
config = argp.parse_args();
print(config)

directions = sorted(
    int(i) for i,ext in 
        filter(
            lambda f: f[1]=='.wav',
            [os.path.splitext(f) for f in os.listdir(config.INPUT_FOLDER)]))

class Main(gr.top_block):
    def __init__(self):
        gr.top_block.__init__(self)

        self.source = WavSource(
            playback_folder=config.INPUT_FOLDER,
            throttle=True)

        self.psd = PowerSpectralDensity(
            num_fft_bins=config.fft_resolution)

        self.processing = select_detection_method(config.detection_method)(
            num_bins=config.fft_resolution,
            center_frequency=0,
            signal_frequency=config.frequency_offset,
            signal_bandwidth=config.signal_bandwidth,
            threshold=config.snr_threshold,
            decay_time=config.detection_interval)

        self.sink = SaveToCsv(
            config.OUTPUT_FILE)

        self.connect(self.source, self.psd, self.processing, self.sink)

main = Main()

for direction in directions:
    print 'direction: {0}'.format(direction)
    main.source.play(str(direction)+'.wav')
    main.sink.set_direction(direction)
    main.psd.set_sample_rate(main.source.sample_rate())
    main.processing.set_resolution(main.psd.output_sample_rate())
    main.start()
    main.wait()
