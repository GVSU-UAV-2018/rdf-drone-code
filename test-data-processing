#!/usr/bin/env python2

import os

if __name__ != '__main__':
    print 'loading '+__name__+' as a module: what do you think you\'re doing?'
    os.exit(-1)

import os.path
from time import sleep

from gnuradio import gr
from gnuradio import blocks
from gnuradio import audio

import programsetup
from blocks.wavsource import WavSource
from blocks.top_level_radio_processing import RDFRadioProcessing
from blocks.top_level_radio_processing import RDFRadioProcessing_output_types
from blocks.top_level_radio_processing import RDFRadioProcessing_output_slots
from blocks.save_to_csv import SaveToCsv
from blocks.tonesource import ToneSource

config = programsetup.get_playback_cmdline_config()
print(config)

directions = sorted(
    int(i) for i,ext in 
        filter(
            lambda f: f[1]=='.wav',
            [os.path.splitext(f) for f in os.listdir(config.INPUT_FOLDER)]))

class Main(gr.top_block):
    def __init__(self):
        gr.top_block.__init__(self)

        self.source = WavSource(
            playback_folder=config.INPUT_FOLDER,
            throttle=True)

        self.processing = RDFRadioProcessing(
            num_fft_bins=config.fft_resolution,
            center_frequency=0,
            signal_frequency=config.frequency_offset,
            signal_bandwidth=config.signal_bandwidth)

        self.sink = SaveToCsv(
            config.OUTPUT_FILE)

        self.connect((self.source, 0), (self.processing, 0))
        self.connect((self.source, 1), (self.processing, 1))

        self.connect((self.source, 0), blocks.complex_to_real(), blocks.multiply_const_ff(1), audio.sink(48000))

        for i in RDFRadioProcessing_output_slots.values():
            self.connect((self.processing, i), (self.sink, i))

main = Main()

for direction in directions:
    print 'direction: {0}'.format(direction)
    main.source.play(direction)
    main.processing.set_sample_rate(main.source.sample_rate())
    main.start()
    main.wait()
